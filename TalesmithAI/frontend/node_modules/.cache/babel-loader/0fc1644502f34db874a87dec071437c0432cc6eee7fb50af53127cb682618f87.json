{"ast":null,"code":"// axiosSetup.js\nimport axios from'axios';import Cookies from'js-cookie';const axiosInstance=axios.create({baseURL:'http://localhost:8000/',withCredentials:true,headers:{'Content-Type':'application/json','Accept':'application/json','X-Requested-With':'XMLHttpRequest'}});axiosInstance.interceptors.request.use(async config=>{let token=Cookies.get('csrftoken');if(!token){try{const response=await axios.get('http://localhost:8000/api/get_csrf/','https://talesmithai.pythonanywhere.com/api/get_csrf/',{withCredentials:true});token=response.data.csrfToken;Cookies.set('csrftoken',token);}catch(error){console.error('Error fetching CSRF token:',error);return Promise.reject(error);}}config.headers['X-CSRFToken']=token;const authToken=localStorage.getItem('authToken');if(authToken){config.headers['Authorization']=\"Token \".concat(authToken);}return config;},error=>{return Promise.reject(error);});export default axiosInstance;","map":{"version":3,"names":["axios","Cookies","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","get","response","data","csrfToken","set","error","console","Promise","reject","authToken","localStorage","getItem","concat"],"sources":["C:/Users/hp/Desktop/fyp/TalesmithAI/frontend/src/axiosSetup.js"],"sourcesContent":["// axiosSetup.js\r\n\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8000/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n    }\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    async config => {\r\n        let token = Cookies.get('csrftoken');\r\n        if (!token) {\r\n            try {\r\n                const response = await axios.get('http://localhost:8000/api/get_csrf/','https://talesmithai.pythonanywhere.com/api/get_csrf/', { withCredentials: true });\r\n                token = response.data.csrfToken;\r\n                Cookies.set('csrftoken', token);\r\n            } catch (error) {\r\n                console.error('Error fetching CSRF token:', error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n        config.headers['X-CSRFToken'] = token;\r\n\r\n        const authToken = localStorage.getItem('authToken');\r\n        if (authToken) {\r\n            config.headers['Authorization'] = `Token ${authToken}`;\r\n        }\r\n\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,OAAO,KAAM,WAAW,CAE/B,KAAM,CAAAC,aAAa,CAAGF,KAAK,CAACG,MAAM,CAAC,CAC/BC,OAAO,CAAE,wBAAwB,CACjCC,eAAe,CAAE,IAAI,CACrBC,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBAAkB,CAC5B,kBAAkB,CAAE,gBACxB,CACJ,CAAC,CAAC,CAEFJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,KAAM,CAAAC,MAAM,EAAI,CACZ,GAAI,CAAAC,KAAK,CAAGV,OAAO,CAACW,GAAG,CAAC,WAAW,CAAC,CACpC,GAAI,CAACD,KAAK,CAAE,CACR,GAAI,CACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAb,KAAK,CAACY,GAAG,CAAC,qCAAqC,CAAC,sDAAsD,CAAE,CAAEP,eAAe,CAAE,IAAK,CAAC,CAAC,CACzJM,KAAK,CAAGE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAC/Bd,OAAO,CAACe,GAAG,CAAC,WAAW,CAAEL,KAAK,CAAC,CACnC,CAAE,MAAOM,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,MAAO,CAAAE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC,CAChC,CACJ,CACAP,MAAM,CAACJ,OAAO,CAAC,aAAa,CAAC,CAAGK,KAAK,CAErC,KAAM,CAAAU,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACnD,GAAIF,SAAS,CAAE,CACXX,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,UAAAkB,MAAA,CAAYH,SAAS,CAAE,CAC1D,CAEA,MAAO,CAAAX,MAAM,CACjB,CAAC,CACDO,KAAK,EAAI,CACL,MAAO,CAAAE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC,CAChC,CACJ,CAAC,CAED,cAAe,CAAAf,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}