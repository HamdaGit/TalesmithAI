{"ast":null,"code":"// axiosSetup.js\n\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8000/',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  let token = Cookies.get('csrftoken');\n  if (!token) {\n    try {\n      const response = await axios.get('http://localhost:8000/api/get_csrf/', {\n        withCredentials: true\n      });\n      token = response.data.csrfToken;\n      Cookies.set('csrftoken', token);\n    } catch (error) {\n      console.error('Error fetching CSRF token:', error);\n      return Promise.reject(error);\n    }\n  }\n  config.headers['X-CSRFToken'] = token;\n  const authToken = localStorage.getItem('authToken');\n  if (authToken) {\n    config.headers['Authorization'] = `Token ${authToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","Cookies","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","get","response","data","csrfToken","set","error","console","Promise","reject","authToken","localStorage","getItem"],"sources":["C:/Users/hp/Desktop/fyp/TalesmithAI/frontend/src/axiosSetup.js"],"sourcesContent":["// axiosSetup.js\r\n\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8000/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n    }\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    async config => {\r\n        let token = Cookies.get('csrftoken');\r\n        if (!token) {\r\n            try {\r\n                const response = await axios.get('http://localhost:8000/api/get_csrf/', { withCredentials: true });\r\n                token = response.data.csrfToken;\r\n                Cookies.set('csrftoken', token);\r\n            } catch (error) {\r\n                console.error('Error fetching CSRF token:', error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n        config.headers['X-CSRFToken'] = token;\r\n\r\n        const authToken = localStorage.getItem('authToken');\r\n        if (authToken) {\r\n            config.headers['Authorization'] = `Token ${authToken}`;\r\n        }\r\n\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAE,wBAAwB;EACjCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE,kBAAkB;IAC5B,kBAAkB,EAAE;EACxB;AACJ,CAAC,CAAC;AAEFJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,MAAMC,MAAM,IAAI;EACZ,IAAIC,KAAK,GAAGV,OAAO,CAACW,GAAG,CAAC,WAAW,CAAC;EACpC,IAAI,CAACD,KAAK,EAAE;IACR,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACY,GAAG,CAAC,qCAAqC,EAAE;QAAEP,eAAe,EAAE;MAAK,CAAC,CAAC;MAClGM,KAAK,GAAGE,QAAQ,CAACC,IAAI,CAACC,SAAS;MAC/Bd,OAAO,CAACe,GAAG,CAAC,WAAW,EAAEL,KAAK,CAAC;IACnC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;IAChC;EACJ;EACAP,MAAM,CAACJ,OAAO,CAAC,aAAa,CAAC,GAAGK,KAAK;EAErC,MAAMU,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACnD,IAAIF,SAAS,EAAE;IACXX,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAI,SAAQe,SAAU,EAAC;EAC1D;EAEA,OAAOX,MAAM;AACjB,CAAC,EACDO,KAAK,IAAI;EACL,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAef,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}